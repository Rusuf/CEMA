{"ast":null,"code":"/**\r\n * Central error handling utility\r\n *//**\r\n * Formats an error message from an API error response\r\n * @param {Error} error - The error object from the API call\r\n * @returns {String} Formatted error message\r\n */export const formatErrorMessage=error=>{if(!error)return'An unknown error occurred';// Handle axios error response\nif(error.response){const{status,data}=error.response;// Format based on status code\nif(status===404){return'The requested resource was not found';}else if(status===400){return data.error||'The request was invalid';}else if(status===401){return'Authentication required';}else if(status===403){return'You do not have permission to access this resource';}else if(status===500){return'A server error occurred. Please try again later.';}// Return the error message from the response if available\nreturn data.error||data.message||`Error ${status}: ${data}`;}// Handle network errors\nif(error.request){return'Network error: Unable to connect to the server';}// Handle other errors\nreturn error.message||'An unexpected error occurred';};/**\r\n * Logs an error with contextual information\r\n * @param {Error} error - The error object\r\n * @param {String} context - Context where the error occurred\r\n */export const logError=function(error){let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';const timestamp=new Date().toISOString();const contextInfo=context?` [${context}]`:'';console.error(`${timestamp}${contextInfo} Error:`,error);// You could extend this to log to a monitoring service\n};/**\r\n * Default error handler that can be used across the application\r\n * @param {Error} error - The error object\r\n * @param {String} context - Context where the error occurred\r\n * @returns {String} Formatted error message\r\n */export const handleError=function(error){let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';logError(error,context);return formatErrorMessage(error);};export default{formatErrorMessage,logError,handleError};","map":{"version":3,"names":["formatErrorMessage","error","response","status","data","message","request","logError","context","arguments","length","undefined","timestamp","Date","toISOString","contextInfo","console","handleError"],"sources":["C:/Users/HP/CEMA/frontend/src/utils/errorHandler.js"],"sourcesContent":["/**\r\n * Central error handling utility\r\n */\r\n\r\n/**\r\n * Formats an error message from an API error response\r\n * @param {Error} error - The error object from the API call\r\n * @returns {String} Formatted error message\r\n */\r\nexport const formatErrorMessage = (error) => {\r\n  if (!error) return 'An unknown error occurred';\r\n  \r\n  // Handle axios error response\r\n  if (error.response) {\r\n    const { status, data } = error.response;\r\n    \r\n    // Format based on status code\r\n    if (status === 404) {\r\n      return 'The requested resource was not found';\r\n    } else if (status === 400) {\r\n      return data.error || 'The request was invalid';\r\n    } else if (status === 401) {\r\n      return 'Authentication required';\r\n    } else if (status === 403) {\r\n      return 'You do not have permission to access this resource';\r\n    } else if (status === 500) {\r\n      return 'A server error occurred. Please try again later.';\r\n    }\r\n    \r\n    // Return the error message from the response if available\r\n    return data.error || data.message || `Error ${status}: ${data}`;\r\n  }\r\n  \r\n  // Handle network errors\r\n  if (error.request) {\r\n    return 'Network error: Unable to connect to the server';\r\n  }\r\n  \r\n  // Handle other errors\r\n  return error.message || 'An unexpected error occurred';\r\n};\r\n\r\n/**\r\n * Logs an error with contextual information\r\n * @param {Error} error - The error object\r\n * @param {String} context - Context where the error occurred\r\n */\r\nexport const logError = (error, context = '') => {\r\n  const timestamp = new Date().toISOString();\r\n  const contextInfo = context ? ` [${context}]` : '';\r\n  \r\n  console.error(`${timestamp}${contextInfo} Error:`, error);\r\n  \r\n  // You could extend this to log to a monitoring service\r\n};\r\n\r\n/**\r\n * Default error handler that can be used across the application\r\n * @param {Error} error - The error object\r\n * @param {String} context - Context where the error occurred\r\n * @returns {String} Formatted error message\r\n */\r\nexport const handleError = (error, context = '') => {\r\n  logError(error, context);\r\n  return formatErrorMessage(error);\r\n};\r\n\r\nexport default {\r\n  formatErrorMessage,\r\n  logError,\r\n  handleError\r\n}; "],"mappings":"AAAA;AACA;AACA,GAEA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,kBAAkB,CAAIC,KAAK,EAAK,CAC3C,GAAI,CAACA,KAAK,CAAE,MAAO,2BAA2B,CAE9C;AACA,GAAIA,KAAK,CAACC,QAAQ,CAAE,CAClB,KAAM,CAAEC,MAAM,CAAEC,IAAK,CAAC,CAAGH,KAAK,CAACC,QAAQ,CAEvC;AACA,GAAIC,MAAM,GAAK,GAAG,CAAE,CAClB,MAAO,sCAAsC,CAC/C,CAAC,IAAM,IAAIA,MAAM,GAAK,GAAG,CAAE,CACzB,MAAO,CAAAC,IAAI,CAACH,KAAK,EAAI,yBAAyB,CAChD,CAAC,IAAM,IAAIE,MAAM,GAAK,GAAG,CAAE,CACzB,MAAO,yBAAyB,CAClC,CAAC,IAAM,IAAIA,MAAM,GAAK,GAAG,CAAE,CACzB,MAAO,oDAAoD,CAC7D,CAAC,IAAM,IAAIA,MAAM,GAAK,GAAG,CAAE,CACzB,MAAO,kDAAkD,CAC3D,CAEA;AACA,MAAO,CAAAC,IAAI,CAACH,KAAK,EAAIG,IAAI,CAACC,OAAO,EAAI,SAASF,MAAM,KAAKC,IAAI,EAAE,CACjE,CAEA;AACA,GAAIH,KAAK,CAACK,OAAO,CAAE,CACjB,MAAO,gDAAgD,CACzD,CAEA;AACA,MAAO,CAAAL,KAAK,CAACI,OAAO,EAAI,8BAA8B,CACxD,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,QAAQ,CAAG,QAAAA,CAACN,KAAK,CAAmB,IAAjB,CAAAO,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC1C,KAAM,CAAAG,SAAS,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAC1C,KAAM,CAAAC,WAAW,CAAGP,OAAO,CAAG,KAAKA,OAAO,GAAG,CAAG,EAAE,CAElDQ,OAAO,CAACf,KAAK,CAAC,GAAGW,SAAS,GAAGG,WAAW,SAAS,CAAEd,KAAK,CAAC,CAEzD;AACF,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAgB,WAAW,CAAG,QAAAA,CAAChB,KAAK,CAAmB,IAAjB,CAAAO,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC7CF,QAAQ,CAACN,KAAK,CAAEO,OAAO,CAAC,CACxB,MAAO,CAAAR,kBAAkB,CAACC,KAAK,CAAC,CAClC,CAAC,CAED,cAAe,CACbD,kBAAkB,CAClBO,QAAQ,CACRU,WACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}