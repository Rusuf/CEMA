{"ast":null,"code":"/**\r\n * Central error handling utility\r\n */\n\n/**\r\n * Formats an error message from an API error response\r\n * @param {Error} error - The error object from the API call\r\n * @returns {String} Formatted error message\r\n */\nexport const formatErrorMessage = error => {\n  if (!error) return 'An unknown error occurred';\n\n  // Handle axios error response\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n\n    // Format based on status code\n    if (status === 404) {\n      return 'The requested resource was not found';\n    } else if (status === 400) {\n      return data.error || 'The request was invalid';\n    } else if (status === 401) {\n      return 'Authentication required';\n    } else if (status === 403) {\n      return 'You do not have permission to access this resource';\n    } else if (status === 500) {\n      return 'A server error occurred. Please try again later.';\n    }\n\n    // Return the error message from the response if available\n    return data.error || data.message || `Error ${status}: ${data}`;\n  }\n\n  // Handle network errors\n  if (error.request) {\n    return 'Network error: Unable to connect to the server';\n  }\n\n  // Handle other errors\n  return error.message || 'An unexpected error occurred';\n};\n\n/**\r\n * Logs an error with contextual information\r\n * @param {Error} error - The error object\r\n * @param {String} context - Context where the error occurred\r\n */\nexport const logError = (error, context = '') => {\n  const timestamp = new Date().toISOString();\n  const contextInfo = context ? ` [${context}]` : '';\n  console.error(`${timestamp}${contextInfo} Error:`, error);\n\n  // You could extend this to log to a monitoring service\n};\n\n/**\r\n * Default error handler that can be used across the application\r\n * @param {Error} error - The error object\r\n * @param {String} context - Context where the error occurred\r\n * @returns {String} Formatted error message\r\n */\nexport const handleError = (error, context = '') => {\n  logError(error, context);\n  return formatErrorMessage(error);\n};\nexport default {\n  formatErrorMessage,\n  logError,\n  handleError\n};","map":{"version":3,"names":["formatErrorMessage","error","response","status","data","message","request","logError","context","timestamp","Date","toISOString","contextInfo","console","handleError"],"sources":["C:/Users/HP/CEMA/frontend/src/utils/errorHandler.js"],"sourcesContent":["/**\r\n * Central error handling utility\r\n */\r\n\r\n/**\r\n * Formats an error message from an API error response\r\n * @param {Error} error - The error object from the API call\r\n * @returns {String} Formatted error message\r\n */\r\nexport const formatErrorMessage = (error) => {\r\n  if (!error) return 'An unknown error occurred';\r\n  \r\n  // Handle axios error response\r\n  if (error.response) {\r\n    const { status, data } = error.response;\r\n    \r\n    // Format based on status code\r\n    if (status === 404) {\r\n      return 'The requested resource was not found';\r\n    } else if (status === 400) {\r\n      return data.error || 'The request was invalid';\r\n    } else if (status === 401) {\r\n      return 'Authentication required';\r\n    } else if (status === 403) {\r\n      return 'You do not have permission to access this resource';\r\n    } else if (status === 500) {\r\n      return 'A server error occurred. Please try again later.';\r\n    }\r\n    \r\n    // Return the error message from the response if available\r\n    return data.error || data.message || `Error ${status}: ${data}`;\r\n  }\r\n  \r\n  // Handle network errors\r\n  if (error.request) {\r\n    return 'Network error: Unable to connect to the server';\r\n  }\r\n  \r\n  // Handle other errors\r\n  return error.message || 'An unexpected error occurred';\r\n};\r\n\r\n/**\r\n * Logs an error with contextual information\r\n * @param {Error} error - The error object\r\n * @param {String} context - Context where the error occurred\r\n */\r\nexport const logError = (error, context = '') => {\r\n  const timestamp = new Date().toISOString();\r\n  const contextInfo = context ? ` [${context}]` : '';\r\n  \r\n  console.error(`${timestamp}${contextInfo} Error:`, error);\r\n  \r\n  // You could extend this to log to a monitoring service\r\n};\r\n\r\n/**\r\n * Default error handler that can be used across the application\r\n * @param {Error} error - The error object\r\n * @param {String} context - Context where the error occurred\r\n * @returns {String} Formatted error message\r\n */\r\nexport const handleError = (error, context = '') => {\r\n  logError(error, context);\r\n  return formatErrorMessage(error);\r\n};\r\n\r\nexport default {\r\n  formatErrorMessage,\r\n  logError,\r\n  handleError\r\n}; "],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAIC,KAAK,IAAK;EAC3C,IAAI,CAACA,KAAK,EAAE,OAAO,2BAA2B;;EAE9C;EACA,IAAIA,KAAK,CAACC,QAAQ,EAAE;IAClB,MAAM;MAAEC,MAAM;MAAEC;IAAK,CAAC,GAAGH,KAAK,CAACC,QAAQ;;IAEvC;IACA,IAAIC,MAAM,KAAK,GAAG,EAAE;MAClB,OAAO,sCAAsC;IAC/C,CAAC,MAAM,IAAIA,MAAM,KAAK,GAAG,EAAE;MACzB,OAAOC,IAAI,CAACH,KAAK,IAAI,yBAAyB;IAChD,CAAC,MAAM,IAAIE,MAAM,KAAK,GAAG,EAAE;MACzB,OAAO,yBAAyB;IAClC,CAAC,MAAM,IAAIA,MAAM,KAAK,GAAG,EAAE;MACzB,OAAO,oDAAoD;IAC7D,CAAC,MAAM,IAAIA,MAAM,KAAK,GAAG,EAAE;MACzB,OAAO,kDAAkD;IAC3D;;IAEA;IACA,OAAOC,IAAI,CAACH,KAAK,IAAIG,IAAI,CAACC,OAAO,IAAI,SAASF,MAAM,KAAKC,IAAI,EAAE;EACjE;;EAEA;EACA,IAAIH,KAAK,CAACK,OAAO,EAAE;IACjB,OAAO,gDAAgD;EACzD;;EAEA;EACA,OAAOL,KAAK,CAACI,OAAO,IAAI,8BAA8B;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,QAAQ,GAAGA,CAACN,KAAK,EAAEO,OAAO,GAAG,EAAE,KAAK;EAC/C,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAC1C,MAAMC,WAAW,GAAGJ,OAAO,GAAG,KAAKA,OAAO,GAAG,GAAG,EAAE;EAElDK,OAAO,CAACZ,KAAK,CAAC,GAAGQ,SAAS,GAAGG,WAAW,SAAS,EAAEX,KAAK,CAAC;;EAEzD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMa,WAAW,GAAGA,CAACb,KAAK,EAAEO,OAAO,GAAG,EAAE,KAAK;EAClDD,QAAQ,CAACN,KAAK,EAAEO,OAAO,CAAC;EACxB,OAAOR,kBAAkB,CAACC,KAAK,CAAC;AAClC,CAAC;AAED,eAAe;EACbD,kBAAkB;EAClBO,QAAQ;EACRO;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}